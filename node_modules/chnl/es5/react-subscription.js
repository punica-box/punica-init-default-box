'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _subscription = require('./subscription');

var _subscription2 = _interopRequireDefault(_subscription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Utility class that extends Subscription for using in ReactComponent - automatically attach/detach listeners
 * in `componentDidMount` / `componentWillUnmount`.
 *
 * @param {ReactComponent} component
 * @param {Array<{channel, event, listener}>} items
 *
 * @example
 * class Button extends React.Component {
 *   constructor() {
 *     super();
 *     new Channel.ReactSubscription(this, [
 *       {channel: onNewData, listener: this.handleNewData.bind(this)}
 *     ]);
 *   }
 * }
 *
 * // actually equals to (but with more boilerplate code):
 * class Button extends React.Component {
 *   constructor() {
 *     super();
 *     this.subscription = new Channel.Subscription([
 *       {channel: onNewData, listener: this.handleNewData.bind(this)}
 *     ]);
 *   }
 *   componentDidMount() {
 *     this.subscription.on();
 *   }
 *   componentWillUnmount() {
 *     this.subscription.off();
 *   }
 * }
 */
var ReactSubscription = function (_Subscription) {
  _inherits(ReactSubscription, _Subscription);

  function ReactSubscription(component, items) {
    _classCallCheck(this, ReactSubscription);

    var _this = _possibleConstructorReturn(this, (ReactSubscription.__proto__ || Object.getPrototypeOf(ReactSubscription)).call(this, items));

    _this._overrideComponentCallback(component, 'componentDidMount', 'on');
    _this._overrideComponentCallback(component, 'componentWillUnmount', 'off');
    return _this;
  }

  /**
   * @param {ReactComponent} component
   * @param {String} callbackName
   * @param {String} methodName
   * @private
   */


  _createClass(ReactSubscription, [{
    key: '_overrideComponentCallback',
    value: function _overrideComponentCallback(component, callbackName, methodName) {
      var _this2 = this;

      var baseCallback = component[callbackName];
      component[callbackName] = function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this2[methodName]();
        if (typeof baseCallback === 'function') {
          return baseCallback.apply(component, args);
        }
      };
    }
  }]);

  return ReactSubscription;
}(_subscription2.default);

exports.default = ReactSubscription;
module.exports = exports.default;