'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _channel = require('./channel');

var _channel2 = _interopRequireDefault(_channel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Event emitter similar to Node.js [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter).
 * The main difference from single channel is that each method takes additional `event` argument.
 *
 * @example
 * import Channel from 'chnl';
 *
 * // create emitter
 * const emitter = new Channel.EventEmitter();
 * // listen 'myEvent'
 * emitter.on('myEvent', data => console.log(data));
 * // emit 'myEvent'
 * emitter.emit('myEvent', 'hello world!');
 */
var EventEmitter = function () {
  function EventEmitter() {
    _classCallCheck(this, EventEmitter);

    this._channels = new Map();
  }

  /**
   * Adds listener to specific event
   *
   * @param {String} event
   * @param {Function} callback
   * @param {Object} [context]
   */


  _createClass(EventEmitter, [{
    key: 'addListener',
    value: function addListener(event, callback, context) {
      this._getChannel(event).addListener(callback, context);
    }

    /**
     * Adds listener to specific event (alias to addListener)
     *
     * @param {String} event
     * @param {Function} callback
     * @param {Object} [context]
     */

  }, {
    key: 'on',
    value: function on(event, callback, context) {
      this.addListener(event, callback, context);
    }

    /**
     * Adds once listener to specific event
     *
     * @param {String} event
     * @param {Function} callback
     * @param {Object} [context]
     */

  }, {
    key: 'addOnceListener',
    value: function addOnceListener(event, callback, context) {
      this._getChannel(event).addOnceListener(callback, context);
    }

    /**
     * Adds once listener to specific event (alias to addOnceListener)
     *
     * @param {String} event
     * @param {Function} callback
     * @param {Object} [context]
     */

  }, {
    key: 'once',
    value: function once(event, callback, context) {
      this.addOnceListener(event, callback, context);
    }

    /**
     * Removes listener from specific event
     *
     * @param {String} event
     * @param {Function} callback
     * @param {Object} [context]
     */

  }, {
    key: 'removeListener',
    value: function removeListener(event, callback, context) {
      this._getChannel(event).removeListener(callback, context);
    }

    /**
     * Removes listener from specific event (alias to removeListener)
     *
     * @param {String} event
     * @param {Function} callback
     * @param {Object} [context]
     */

  }, {
    key: 'off',
    value: function off(event, callback, context) {
      this.removeListener(event, callback, context);
    }

    /**
     * Is listener exist for specific event
     *
     * @param {String} event
     * @param {Function} callback
     * @param {Object} [context]
     * @returns {Boolean}
     */

  }, {
    key: 'hasListener',
    value: function hasListener(event, callback, context) {
      return this._getChannel(event).hasListener(callback, context);
    }

    /**
     * Is listener exist for specific event (alias to hasListener)
     *
     * @param {String} event
     * @param {Function} callback
     * @param {Object} [context]
     * @returns {Boolean}
     */

  }, {
    key: 'has',
    value: function has(event, callback, context) {
      return this.hasListener(event, callback, context);
    }

    /**
     * Are there any listeners for specific event
     *
     * @returns {Boolean}
     */

  }, {
    key: 'hasListeners',
    value: function hasListeners(event) {
      return this._getChannel(event).hasListeners();
    }

    /**
     * Call all listeners for specific event
     *
     * @param {String} event
     * @param {*} args
     */

  }, {
    key: 'dispatch',
    value: function dispatch(event) {
      var _getChannel2;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_getChannel2 = this._getChannel(event)).dispatch.apply(_getChannel2, args);
    }

    /**
     * Call all listeners for specific event
     *
     * @param {String} event
     * @param {*} args
     */

  }, {
    key: 'emit',
    value: function emit(event) {
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      this.dispatch.apply(this, [event].concat(args));
    }

    /**
     * Returns channe by event name
     *
     * @param {String} event
     * @returns {Channel}
     * @private
     */

  }, {
    key: '_getChannel',
    value: function _getChannel(event) {
      if (!this._channels.has(event)) {
        this._channels.set(event, new _channel2.default(event));
      }
      return this._channels.get(event);
    }
  }]);

  return EventEmitter;
}();

exports.default = EventEmitter;
module.exports = exports.default;