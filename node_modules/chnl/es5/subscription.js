'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _subscriptionItem = require('./subscription-item');

var _subscriptionItem2 = _interopRequireDefault(_subscriptionItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Utility class allowing dynamically attach/detach batch of listeners to event channels.
 *
 * @param {Array<{channel, event, listener}>} items
 *
 * @example
 * import Channel from 'chnl';
 * const subscription = new Channel.Subscription([
 *   {
 *     channel: chrome.tabs.onUpdated,
 *     listener: this._onTabUpdated.bind(this)
 *   }
 * ]);
 *
 * // attach listeners
 * subscription.on();
 * // detach listeners
 * subscription.off();
 */
var Subscription = function () {
  function Subscription(items) {
    _classCallCheck(this, Subscription);

    this._items = items.map(function (params) {
      return new _subscriptionItem2.default(params);
    });
  }

  /**
   * Turn on all listeners
   *
   * @returns {Subscription}
   */


  _createClass(Subscription, [{
    key: 'on',
    value: function on() {
      this._items.forEach(function (item) {
        return item.on();
      });
      return this;
    }

    /**
     * Turn off all listeners
     *
     * @returns {Subscription}
     */

  }, {
    key: 'off',
    value: function off() {
      this._items.forEach(function (item) {
        return item.off();
      });
      return this;
    }
  }]);

  return Subscription;
}();

exports.default = Subscription;
module.exports = exports.default;