'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Subscription item
 * @private
 */
var SubscriptionItem = function () {
  /**
   * Constructor
   *
   * @param {Object} params
   * @param {Object} params.channel
   * @param {String} [params.event]
   * @param {Function} params.listener
   */
  function SubscriptionItem(params) {
    _classCallCheck(this, SubscriptionItem);

    this._params = params;
    this._isOn = false;
    this._assertParams();
  }

  /**
   * Turn on listener of channel
   */


  _createClass(SubscriptionItem, [{
    key: 'on',
    value: function on() {
      if (!this._isOn) {
        var channel = this._params.channel;

        var method = channel.addListener || channel.addEventListener || channel.on;
        this._applyMethod(method);
        this._isOn = true;
      }
    }

    /**
     * Turn off listener of channel
     */

  }, {
    key: 'off',
    value: function off() {
      if (this._isOn) {
        var channel = this._params.channel;

        var method = channel.removeListener || channel.removeEventListener || channel.off;
        this._applyMethod(method);
        this._isOn = false;
      }
    }
  }, {
    key: '_applyMethod',
    value: function _applyMethod(method) {
      var _params = this._params,
          channel = _params.channel,
          event = _params.event,
          listener = _params.listener;

      var args = event ? [event, listener] : [listener];
      method.apply(channel, args);
    }
  }, {
    key: '_assertParams',
    value: function _assertParams() {
      var _params2 = this._params,
          channel = _params2.channel,
          event = _params2.event,
          listener = _params2.listener;

      if (!channel || (typeof channel === 'undefined' ? 'undefined' : _typeof(channel)) !== 'object') {
        throw new Error('Channel should be object');
      }
      if (event && typeof event !== 'string') {
        throw new Error('Event should be string');
      }
      if (!listener || typeof listener !== 'function') {
        throw new Error('Listener should be function');
      }
    }
  }]);

  return SubscriptionItem;
}();

exports.default = SubscriptionItem;
module.exports = exports.default;